
worker_processes    1;

events {
    worker_connections  1024;
    accept_mutex_delay  100ms;
}


http {
    sendfile            on;
    tcp_nopush          on;
    #keepalive_timeout  0;
    keepalive_requests  500000;
    #gzip               on;
    open_file_cache     max=100;
    include             mime.types;
    default_type        text/html;
    index               index.htm;
    resolver            8.8.8.8;
    resolver_timeout    5;
    
    #
    # log settings
    #
    access_log  off;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    
    # 
    # lua global settings
    #
    lua_check_client_abort  on;
    lua_code_cache          on;
    
    #
    # initialize script
    #
    init_by_lua "Proxy = require('resty.proxy');";
    
    #
    # Admin Console
    #
    server {
        listen      8080;
        root        html;
        
        #
        # content handler: html
        #
        location ~* \.(html|htm)$ {
            content_by_lua "
                local rc, entity = Proxy.get( 'http://www.yahoo.com/' );
                local SYMBOLS = {
                    ['<'] = '&lt;',
                    ['>'] = '&gt;'
                };
                local stringify;
                
                stringify = function( tbl, parent )
                    local str = '';
                    
                    parent = parent and parent .. '.' or '';
                    for k, v in pairs( tbl ) do
                        k = parent .. k;
                        if type( v ) == 'table' then
                            str = str .. stringify( v, k );
                        else
                            str = str .. k .. ': ' .. 
                                  tostring(v):gsub('[<>]', SYMBOLS ) .. 
                                  '\\n';
                        end
                    end
                    
                    return str;
                end
                
                ngx.say( '<pre>' .. stringify( entity ) .. '</pre>' );
            ";
        }
        
        #
        # proxy
        #
        set $proxy_gateway '/proxy_gateway';
        location /proxy_gateway {
            internal;
            rewrite_by_lua          "Proxy.preflight();";
            proxy_redirect          off;
            proxy_pass              $uri$is_args$args;
            proxy_pass_request_body on;
        }
    }
}


